{
    "record1": {
        "<1>": "/*\r\n   Author  : Captain C\r\n   Date    : September 2002\r\n   Purpose : BUTTONUP event processing for the EXAMPLES_UPDATES dialog.\r\n   \r\n   Comments\r\n   ========\r\n   \r\n    This BUTTONUP event performs the following functions:\r\n    \r\n       1) Detects to see if the buttondDown and ButtonUp occurs over \r\n          the www text label. If so we simulate a hyperlink click that\r\n          uses the Windows API function ShellExecute to launch the \r\n          user's browser and direct them to http://www.revelation.com\r\n      \r\n   Amended   Date       Reason\r\n   =======   ====       ======\r\n   \r\n*/\r\n   declare function shellExecute, formatMessage\r\n   $insert logical\r\n   \r\n   equ FORMAT_MESSAGE_FROM_SYSTEM$ to 0x1000\r\n   equ WWW_URL$ to \"http://www.revelation.com\"\r\n   \r\n   wwwSize = get_Property( @window : \".TXT_WWW\", \"SIZE\" )\r\n   \r\n   if ( xDown >= wwwSize<1> ) then\r\n       if ( yDown >= wwwSize<2> ) then\r\n          if ( xDown <= ( wwwSize<1> + wwwSize<3> ) ) then\r\n             if ( yDown <= ( wwwSize<2> + wwwSize<4> ) ) then\r\n                * // Now check BUTTONUP\r\n                if ( xUp >= wwwSize<1> ) then\r\n                   if ( yUp >= wwwSize<2> ) then\r\n                      if ( xUp <= ( wwwSize<1> + wwwSize<3> ) ) then\r\n                         if ( yUp <= ( wwwSize<2> + wwwSize<4> ) ) then\r\n                            goSub execBrowser\r\n                         end\r\n                      end\r\n                   end\r\n                end\r\n             end\r\n          end\r\n       end\r\n    end\r\n  \r\nRETURN 0\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\nexecBrowser:\r\n\r\n   * // We now use the Windows API ShellExecute function to execute the user's\r\n   * // default browser to take us to the Revelation Site:\r\n   * //\r\n   * // ShellExecute() is exported from Shell32.DLL - this is not part of the \r\n   * // standard OI32 release and as such you may need to prototype it\r\n   * // yourself.  If this is the case follow the steps below:\r\n   * //\r\n   * // 1) Create a new record in the System Editor \r\n   * // \r\n   * // 2) On the first line enter the text 'SHELL32' without the quotes\r\n   * //\r\n   * // 3) On the second line enter the following text:\r\n   * //\r\n   * //    HANDLE STDCALL ShellExecuteA( HANDLE, LPCHAR, LPCHAR, LPCHAR, LPCHAR, INT ) As ShellExecute\r\n   * //\r\n   * // 4) Save this record to the SYSPROCS table as DLL_SHELL32\r\n   * //\r\n   * // 5) In the System Editor Exec line enter and execute the following:\r\n   * //\r\n   * //    RUN DECLARE_FCNS \"DLL_SHELL32\"\r\n   * //\r\n   * // You should now be able to call the ShellExecute function directly from\r\n   * // Basic+.  Note that we recommend you perform this procedure from within\r\n   * // your SYSPROG account rather than you application account to help avoid\r\n   * // any future version problems.\r\n   * //\r\n   * // For more information on DLL prototyping please consult the OpenInsight\r\n   * // on-line help.\r\n   * //\r\n   * // For more information on the Windows API please visit the Microsoft\r\n   * // Developers Network site on teh web at http://msdn.microsoft.com\r\n   \r\n   hwnd         = get_Property( @window, \"HANDLE\" )\r\n   lpOperation  = \"open\" : \\00\\\r\n   lpFile       = WWW_URL$ : \\00\\\r\n   lpParameters = \\00\\\r\n   lpDirectory  = \\00\\\r\n   nShowCmd     = 1\r\n   \r\n   retVal = shellExecute( hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd )\r\n   \r\n   if ( retval > 32 ) then\r\n      * // we should now have a browser at Rev!\r\n   end else\r\n      * // An error has occured so use the FormatMessage() API call to get it's text.\r\n      * // This is the same code as used in the REGISTRY_METHOD function\r\n      \r\n      dwFlags      = FORMAT_MESSAGE_FROM_SYSTEM$\r\n      lpSource     = 0\r\n      dwMessageID  = retVal\r\n      dwLanguageID = 0\r\n      lpBuffer     = str( \\00\\, 2048 )\r\n      nSize        = len( lpBuffer ) - 1\r\n      lpArguments  = 0\r\n   \r\n      call formatMessage( dwFlags, lpSource, dwMessageID, dwLanguageID, lpBuffer, nSize, lpArguments )\r\n   \r\n      errorText = lpBuffer[1,\\00\\]\r\n      if ( errorText[-2,2] = \\0D0A\\ ) then\r\n         errorText[-2,2] = \"\"\r\n      end\r\n      \r\n      if len( errorText ) then\r\n         dataArray     = errorText\r\n         dataArray<4>  = \"!\"\r\n         dataArray<8>  = \"C\"\r\n         dataArray<12> = \"ShellExecute error\"\r\n         call msg( @window, dataArray )\r\n      end   \r\n   end\r\n   \r\nreturn"
    }
}