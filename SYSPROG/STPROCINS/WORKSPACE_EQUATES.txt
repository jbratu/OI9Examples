compile insert WorkSpace_Equates

******************************************************************************
*
* Name       :  Workspace Equates
* Description:  Constants for the WorkSpace frame
*
* History    :  (date, initials, notes)
*   12/16/96  apk  Initial creation
*   01/12/96  cp   Assisting with UI/WS for Hoffa
*   05/28/96  cp   Added get-key message for "Save As..." functionality
*   06/10/97  cp   Created WorkSpace_Equates based on User Interface WorkSpace
*	 04/03/08  spf  Add reference to RTI_FRAME For RTI_IDE_MDI calls
*
******************************************************************************

equ FRAME$ to "WORKSPACE"
equ PREF$  to "WORKSPACE_PREF"
Equ RTI_FRAME$ To "RTI_IDE_MDI"


* the WorkSpace MDI frame communicates with its children using events.
* the following list of events are generated by the frame to the children:
*
* Event         Parameter             Description
* -----------   -------------------   -------------------------------------
* CREATE        EntID                 the CREATE event for the child window represents either File-New
*                                     or File-Open; the parameter is the repository component id to open;
*                                     File-New passes a null create parameter
* CLOSE                               the CLOSE event is sent directly from the frame to all registered
*                                     children when the frame closes
* WRITE                               the WRITE event is used for both "File-Save" and "File-Save As";
*                                     for more information on "File-Save As", see OMNIEVENT WSM_SETKEY$;
*                                     reporting errors to the user during WRITE is the responsibility
*                                     of the child window; errors are reported back to the frame using
*                                     Set_EventStatus()
* OMNIEVENT     WSM_SETKEY$, EntID    the only time that the component id for a child window can change
*                                     is when the user saves the component under a diferent id; the frame
*                                     sends OMNIEVENT WSM_SETKEY$ to change the key and then sends WRITE
*                                     to save the component; reporting errors to the user during locking is
*                                     the responsibility of the child window; an error is reported back
*                                     to the frame using Set_EventStatus()
* OMNIEVENT     WSM_GETKEY$, &EntID   since the child maintains the current component id, the frame uses
*                                     this message to request the component id, which is returned in EntID
* OMNIEVENT     WSM_TESTRUN$          the frame sends this message when the user selects test run
*
*
*
* the following list of events are generated by the children to the frame:
*
* Event         Parameter                    Description
* -----------   --------------------------   -------------------------------------
* OMNIEVENT     WSM_REGISTER$, child         the child has successfully created
* OMNIEVENT     WSM_UNREGISTER$, child       the child is terminating
* OMNIEVENT     WSM_ACTIVATE$, child         the child window has received focus
* OMNIEVENT     WSM_DEACTIVATE$, child       the child window no longer has focus
* OMNIEVENT     WSM_REQSAVEAS$, child        the child window requests save-as processing
* OMNIEVENT     WSM_SETSTATE$, child, list   the child window requests options toggled; list is a structure
*                                            composed of two fields; the first field is a list (@vm-delim'd
*                                            of items to toggle the states of; the second field is an
*                                            associated list of booleans specifying whether to enable or
*                                            disable each item
* OMNIEVENT     WSM_OPENENTID$, entid        requests WorkSpace to open the specified entid

* messages to the child
equ WSM_SETKEY$       to "SETKEY"     ;* frame informs child what the component key is
equ WSM_TESTRUN$      to "TESTRUN"    ;* the user requests test run
equ WSM_HELP$         to "HELP"       ;* the user requests help
equ WSM_ABOUT$        to "ABOUT"      ;* the user requests help-about
equ WSM_COMMAND$      to "COMMAND"    ;* the user selected a menu item which is handled by the child
equ WSM_GETKEY$       to "GETKEY"     ;* frame requests the component key from the child

* messages to the frame
equ WSM_REGISTER$     to "REGISTER"   ;* a child is being created
equ WSM_UNREGISTER$   to "UNREGISTER" ;* a child is being closed
equ WSM_ACTIVATE$     to "ACTIVATE"   ;* a child is being activated
equ WSM_DEACTIVATE$   to "DEACTIVATE" ;* a child is being deactivated
equ WSM_REQSAVEAS$    to "REQSAVEAS"  ;* a child is requesting to be saved under a new name
equ WSM_SETSTATE$     to "SETSTATE"   ;* the state of a child is changing, so adjust the menu
equ WSM_OPENENTID$    to "OPENENTID"  ;* the frame is instructed to open a component (not typically sent from a child)

* WSM_SETSTATE$ structure
equ WSS_ITEM$         to 1
equ WSS_ENABLE$       to 2

* WSS_ITEM$ values
equ WSS_SAVE$         to 1
equ WSS_SAVEAS$       to 2
equ WSS_TESTRUN$      to 3
equ WSS_OPTIONS$      to 4
equ WSS_SPECIFIC$     to 11         ;* first specific item is 11, second is 12, etc.


*************************
* WorkSpace INI structure
*************************

equ WS_INI_FILE$ to "OINSIGHT.INI"
equ WS_INI_SECT$ to "Workspace"
equ WS_INI_MRU$  to "FileList"
equ WS_INI_SIZE$ to "WorkspaceSize"
equ WS_INI_TYPE$ to "DefaultType"


*********************************************
* structure of WorkSpace configuration record
*********************************************

* configuration stored in SYSENV file using the following key prefix
equ CFG_KEY_PREFIX$         to 'CFG_'

* structure of configuration record
equ WSCFG_TOOLNAME$         to 1    ;* The tool appearing in the WorkSpace
equ WSCFG_TOOLTYPE$         to 2    ;* Enumerated value of tool type
equ WSCFG_TYPECLASS$        to 3    ;* The type and class (*-delim'd) of the component (if applicable)
equ WSCFG_WINDOWNAME$       to 4    ;* The MDI child window for the tool
equ WSCFG_MULTIINSTANCE$    to 5    ;* Is the tool multi-instance? (Most likely yes)
equ WSCFG_MENUNAME$         to 6    ;* The tool specific menu on the main menu
equ WSCFG_MENUITEMS$        to 7    ;* Items in the tools specific menu
equ WSCFG_BUTTONS$          to 8    ;* Buttons on the frame
equ WSCFG_DFTSTATE$         to 9    ;* default state information (bool array) (see WSS_ITEM$ values)
equ WSCFG_TITLE$            to 10   ;* title for the workspace
equ WSCFG_ICON$             to 11   ;* icon for the workspace
equ WSCFG_HELP$             to 12   ;* help info for the workspace:  <0,1>=help file, <0,2>=topic id
equ WSCFG_ABOUT$            to 13   ;* about message name

* values for WSCFG_TOOLTYPE$
equ WSCFG_TYPEBUILDER$      to 0    ;* Builder (Entity-based)
equ WSCFG_TYPETOOL$         to 1    ;* Tool
equ WSCFG_TYPEDIALOG$       to 2    ;* Modal dialog
Equ WSCFG_TYPEWIN$		To 3 ; * Start Window

* structure of WSCFG_MENUITEMS$
equ WSCFG_MENUITEMTYPE$     to 1    ;* menu item type
equ WSCFG_MENUITEMTEXT$     to 2    ;* text of the menu option
equ WSCFG_MENUITEMACCEL$    to 3    ;* see ACCELERATOR property
equ WSCFG_MENUITEMSTYLE$    to 4    ;* see ITEMSTYLE property
equ WSCFG_MENUITEMHELP$     to 5    ;* status line help text for the menu item

* values for WSCFG_MENUITEMTYPE$
equ WSCFG_MENUTYPETEXT$     to 0    ;* regular menu item
equ WSCFG_MENUTYPESEP$      to 2048 ;* not implemented yet

* structure of WSCFG_BUTTONS$
equ WSCFG_BUTTONSITEM$      to 1    ;* Button name 
equ WSCFG_BUTTONSBMP$       to 2    ;* Entity for the BMP
equ WSCFG_BUTTONSIMAGES$    to 3    ;* Number of images in the BMP
equ WSCFG_BUTTONSTEXT$      to 4    ;* Text to appear on button
equ WSCFG_BUTTONSBUBBLE$    to 5    ;* Bubble help text
equ WSCFG_BUTTONSHELP$      to 6    ;* Button help text
equ WSCFG_BUTTONSCLIP$      to 7    ;* Boolean value for clip (true) or resize (false)

* structure of WSCFG_TOOLMENU$
!equ WSCFG_TOOLTEXT$         to 1    ;* Menu text
!equ WSCFG_TOOLHELP$         to 2    ;* Menu Help
!equ WSCFG_TOOLFUNCTION$     to 3    ;* Function call for menu option
!equ WSCFG_TOOLPARAM$        to 4    ;* Paramter list for function

